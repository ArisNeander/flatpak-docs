# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version:  Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-20 10:17-0400\n"
"PO-Revision-Date: 2018-03-15 06:51+0900\n"
"Last-Translator: ohpato <ohpato@hanmail.net>\n"
"Language: ko_KR\n"
"Language-Team: ohpato <ohpato@hanmail.net>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../manifests.rst:2
msgid "Manifests"
msgstr "Manifest 파일들"

#: ../../manifests.rst:4
msgid ""
"The input to ``flatpak-builder`` is a JSON file that describes the "
"parameters for building an application, as well as instructions for each "
"of the modules that are to be built. This file is called the manifest."
msgstr ""
"Manifest 파일은 플랫팩 빌더의 입력이며, 응용프로그램 빌드를 위한 매개변수 및 번들로 묶일 모듈들을 빌드하기 위한 방법을 "
"지시하는 JSON 파일이다."

#: ../../manifests.rst:6
msgid ""
"This page provides information and guidance on how to use manifests, "
"including an explanation of the most common parameters that can be "
"specified. It is recommended to have followed the :doc:`first-build` "
"tutorial before reading this section, and to be familiar with :doc"
":`flatpak-builder`."
msgstr ""

#: ../../manifests.rst:8
msgid ""
"Manifest files should be named using the application ID. For example, the"
" manifest file for GNOME Dictionary is named "
"``org.gnome.Dictionary.json``. This page uses this manifest file, which "
"was introduced in :doc:`first-build`, for all its examples."
msgstr ""

#: ../../manifests.rst:10
#, fuzzy
msgid ""
"A complete list of all the properties that can be specified in manifest "
"files can be found in the :doc:`flatpak-builder-command-reference`, as "
"well as the ``flatpak-manifest`` man page."
msgstr ""
"플랫팩의 manifest 파일 내에서 지정할 수 있는 각 속성에 관해서는 :doc:`플랫팩 빌더 명령어 레퍼런스` 또는 플랫팩 "
"빌더의 맨페이지를 참고한다."

#: ../../manifests.rst:13
msgid "Basic properties"
msgstr ""

#: ../../manifests.rst:15
msgid ""
"Each manifest file should specify basic information about the application"
" that is to be built, including the ``app-id``, ``runtime``, ``runtime-"
"version``, ``sdk`` and ``command`` parameters. These properties are "
"typically specified at the beginning of the file."
msgstr ""

#: ../../manifests.rst:17
msgid "For example, the GNOME Dictionary manifest includes:"
msgstr ""

#: ../../manifests.rst:27
msgid ""
"Specifying a runtime and runtime version allows that the runtime that is "
"needed by your application to be automatically installed on users' "
"systems."
msgstr ""

#: ../../manifests.rst:30
msgid "File renaming"
msgstr "파일 재명명"

#: ../../manifests.rst:32
msgid ""
"As was described in the :doc:`introduction`, exports are application "
"files that are made available to the host, and include things like the "
"application's ``.desktop`` file and icon."
msgstr ""

#: ../../manifests.rst:34
msgid ""
"The names of files that are exported by a Flatpak must prefixed using the"
" application ID, such as ``org.gnome.Dictionary.desktop``. The best way "
"to do this is to rename these files directly in the application's source."
msgstr ""

#: ../../manifests.rst:36
msgid ""
"If renaming exported files to use the application ID is not possible, "
"``flatpak-builder`` allows them to be renamed as part of the build "
"process. This can be done by specifying one of the following properties "
"in the manifest:"
msgstr ""

#: ../../manifests.rst:38
msgid "``rename-icon`` - rename the application icon"
msgstr ""

#: ../../manifests.rst:39
msgid "``rename-desktop-file`` - rename the ``.desktop`` filename"
msgstr ""

#: ../../manifests.rst:40
msgid "``rename-appdata-file`` - rename the AppData file"
msgstr ""

#: ../../manifests.rst:42
msgid ""
"Each of these properties accepts the name of the source file to be "
"renamed. ``flatpak-builder`` then automatically renames the file to match"
" the application ID. Note that this renaming method can introduce "
"internal naming conflicts, and that renaming files in tree is therefore "
"the most reliable approach."
msgstr ""

#: ../../manifests.rst:45
#, fuzzy
msgid "Finishing"
msgstr "finish-args"

#: ../../manifests.rst:47
msgid ""
"Applications that are run with Flatpak have extremely limited access to "
"the host environment by default, but applications require access to "
"resources outside of their sandbox in order to be useful. Finishing is "
"the build stage where the application's sandbox permissions are "
"specified, in order to give access to these resources."
msgstr ""

#: ../../manifests.rst:49
msgid ""
"The finishing manifest section uses the ``finish-args`` property, which "
"can be seen in the Dictionary manifest file:"
msgstr ""

#: ../../manifests.rst:58
msgid ""
"As was explained in :doc:`first-build`, these two finishing properties "
"give the application access to the X11 display server and to the network."
" Guidance on which permissions to use can be found in :doc:`sandbox-"
"permissions`, and a full list of ``finish-args`` options can be found in "
":doc:`sandbox-permissions-reference`."
msgstr ""

#: ../../manifests.rst:61
msgid "Cleanup"
msgstr "마무리 정리(Cleanup)"

#: ../../manifests.rst:63
msgid ""
"The cleanup property can be used to remove files that are produced by the"
" build process but which aren't wanted as part of the application, such "
"as headers or developer documentation. Two properties in the manifest "
"file are used for this. First, a list of filename patterns can be "
"included::"
msgstr ""

#: ../../manifests.rst:67
msgid ""
"The second cleanup property is a list of commands that are run during the"
" cleanup phase::"
msgstr "두 번째 속성은 마무리 정리 단계에서 실행될 명령어 리스트이다::"

#: ../../manifests.rst:71
msgid ""
"Cleanup properties can be set on a per-module basis, in which case only "
"filenames that were created by that particular module will be matched."
msgstr ""
"마무리 정리를 위해 모듈단위로(per-module)로 속성을 설정할 수 있는데, 해당 모듈에 의해 생성된 파일들 중 속성을 통해 "
"지정된 파일 이름에 해당하는 것이 있는지 비교하게 된다."

#: ../../manifests.rst:74
msgid "Modules"
msgstr ""

#: ../../manifests.rst:76
msgid ""
"The module list specifies each of the modules that are to be built as "
"part of the build process. One of these modules is the application "
"itself, and other modules are dependencies and libraries that are bundled"
" as part of the Flatpak. While simple applications may only specify one "
"or two modules, and therefore have short modules sections, some "
"applications can bundle numerous modules and therefore have lengthy "
"modules sections."
msgstr ""

#: ../../manifests.rst:78
msgid ""
"GNOME Dictionary's modules section is short, since it just contains the "
"application itself, and looks like:"
msgstr ""

#: ../../manifests.rst:95
msgid ""
"As can be seen, each listed module has a ``name`` (which can be freely "
"assigned) and a list of ``sources``. Each source has a ``type``, and "
"available types include:"
msgstr ""

#: ../../manifests.rst:97
msgid "``archive`` - ``.tar`` or ``.zip`` archive files"
msgstr ""

#: ../../manifests.rst:98
msgid "``git`` - Git repositories"
msgstr ""

#: ../../manifests.rst:99
msgid "``bzr`` - Bazaar repositories"
msgstr ""

#: ../../manifests.rst:100
msgid "``file`` - local file (these are copied into the source directory)"
msgstr ""

#: ../../manifests.rst:101
msgid ""
"``script`` - an array of shell commands (these are put in a shellscript "
"file)"
msgstr ""

#: ../../manifests.rst:102
msgid ""
"``shell`` -an array of shell commands that are run during source "
"extraction"
msgstr ""

#: ../../manifests.rst:103
msgid "``patch`` - a patch (are applied to the source directory)"
msgstr ""

#: ../../manifests.rst:104
msgid ""
"``extra-data`` - data that can be downloaded at install time; this can "
"include archive or package files"
msgstr ""

#: ../../manifests.rst:106
msgid ""
"Different properties are available for each source type, which are listed"
" in the :doc:`flatpak-builder-command-reference`."
msgstr ""

#: ../../manifests.rst:109
msgid "Supported build systems"
msgstr ""

#: ../../manifests.rst:111
msgid "Modules can be built with a variety of build systems, including:"
msgstr ""

#: ../../manifests.rst:113
msgid ""
"`autotools <https://www.gnu.org/software/automake/manual/html_node"
"/Autotools-Introduction.html>`_"
msgstr ""

#: ../../manifests.rst:114
msgid "`cmake <https://cmake.org/>`_"
msgstr ""

#: ../../manifests.rst:115
msgid ""
"`cmake-ninja <https://cmake.org/cmake/help/v3.0/generator/Ninja.html>`_, "
"`meson <http://mesonbuild.com/>`_"
msgstr ""

#: ../../manifests.rst:116
msgid "the \"`Build API <https://github.com/cgwalters/build-api/>`_\""
msgstr ""

#: ../../manifests.rst:118
msgid ""
"A \"simple\" build method is also available, which allows a series of "
"commands to be specified."
msgstr ""

#: ../../manifests.rst:121
msgid "Example manifests"
msgstr "Manifest 예제"

#: ../../manifests.rst:123
msgid ""
"A `complete manifest for GNOME Dictionary built from Git "
"<https://github.com/flathub/org.gnome.Dictionary/blob/master/org.gnome.Dictionary.json>`_."
" It is also possible to browse `all the manifests hosted by Flathub "
"<https://github.com/flathub>`_."
msgstr ""
"`Git에서 받아 빌드하는 GNOME 사전용 manifest 파일(완전판) "
"<https://github.com/flathub/org.gnome.Dictionary/blob/master/org.gnome.Dictionary.json>`_)"
" 및 `플랫허브에서 호스팅하는 모든 manifest 파일 <https://github.com/flathub>`_ 을 참고할만 하다."

#~ msgid ""
#~ "The following example is the manifest"
#~ " for the GNOME Dictionary application. "
#~ "It is short, because only one "
#~ "module is built - the application "
#~ "itself::"
#~ msgstr ""
#~ "다음 예제는 GNOME 사전 응용프로그램(GNOME "
#~ "Dictionary)의 manifest 정보이다. 빌드하고자 하는 모듈이"
#~ " 하나, 즉 응용프로그램 자신 뿐이라서 길이가 짧다::"

#~ msgid ""
#~ "As can be seen, this manifest "
#~ "includes basic information about the "
#~ "application before specifying a single "
#~ ".tar file to be downloaded and "
#~ "built. More complex manifests include a"
#~ " sequence of modules. Module sources "
#~ "can be of several types, including "
#~ "``.tar`` or ``.zip`` archives, Git or"
#~ " Bzr repositories, patch files or "
#~ "shell commands that are run."
#~ msgstr ""
#~ "내용을 보면 알 수 있듯, manifest는 응용프로그램에"
#~ " 대한 기본 정보를 기술하고, 뒤이어 다운로드 되고"
#~ " 설치될 .tar 파일을 지정하고 있다. 더 복잡한"
#~ " manifest들은 일련의 모듈들을 포함하고 있다. 모듈 "
#~ "소스들은 ``.tar`` 나 ``.zip`` 형식의 묶음 "
#~ "파일이 될 수도 있고, Git이나 Bar 저장소가 "
#~ "될 수도 있으며 패치 파일이나 실행가능한 쉘 명령이"
#~ " 될 수도 있는 등 다양한 형태를 가질 수"
#~ " 있다."

#~ msgid ""
#~ "Flatpaks have extremely limited access "
#~ "to the host environment by default. "
#~ "However, most applications require access "
#~ "to resources outside of their sandbox"
#~ " in order to be useful. This "
#~ "can be achieved with the ``finish-"
#~ "args`` manifest section, which allows "
#~ "sandbox permissions to be configured."
#~ msgstr ""
#~ "기본적으로 플랫팩은 호스트 환경에 대한 접근이 극도로 "
#~ "제한된다. 하지만 대부분의 응용프로그램들이 편의 제공을 "
#~ "목적으로 샌드박스 바깥의 자원 접근을 필요로 하는 "
#~ "것도 사실이다. 이를 위해 manifest 파일의 "
#~ "``finish-args`` 섹션에서 응용프로그램에 허가하고자 하는 "
#~ "샌드박스 권한 목록을 설정할 수 있다."

#~ msgid ""
#~ "While there are no restrictions on "
#~ "which sandbox permissions an application "
#~ "can use, as good practice, it is"
#~ " recommended to use the minimum "
#~ "number of as permissions possible. "
#~ "Certain permissions, such as blanket "
#~ "access to the system bus (using "
#~ "the ``--socket=system-bus`` option) are "
#~ "strongly discouraged."
#~ msgstr ""
#~ "응용프로그램에게 샌드박스 권한을 허용하는 데에는 별도의 제약이"
#~ " 없으나, 되도록 최소한의 권한만을 허용할 것을 "
#~ "권장한다. 시스템 버스에 대한 블랭킷 접근(blanket "
#~ "access) (``—socket=system-bus`` 옵션을 통해 "
#~ "가능)과 같은 것은 권장하지 않는다."

#~ msgid ""
#~ "A list of ``finish-args`` options "
#~ "can be found in :doc:`sandbox-"
#~ "permissions`."
#~ msgstr "``finish-args`` 옵션의 목록은 :doc:`sandbox-permissions`에서 찾아볼 수 있다."

#~ msgid ""
#~ "After building has taken place, "
#~ "``flatpak-builder`` performs a cleanup "
#~ "phase. This can be used to remove"
#~ " headers and development documentation, "
#~ "among other things. Two properties in"
#~ " the manifest file are used for "
#~ "this. First, a list of filename "
#~ "patterns can be included::"
#~ msgstr ""
#~ "빌드가 수행된 후, 플랫팩 빌더는 마무리 정리를 "
#~ "위한 삭제(clean up)를 수행한다. 헤더들 및 개발문서를"
#~ " 지우는 것도 이에 해당한다. manifest 파일의 두"
#~ " 속성이 이러한 일에 사용된다. 첫번째는 파일이름이다::"

#~ msgid ""
#~ "Files that are exported by a "
#~ "flatpak must be prefixed using the "
#~ "application ID. If an application's "
#~ "source files are not named using "
#~ "this convention, flatpak-builder allows "
#~ "them to be renamed as part of "
#~ "the build process. To rename application"
#~ " icons, desktop files and AppData "
#~ "files, use the ``rename-icon``, "
#~ "``rename-desktop-file`` and ``rename-"
#~ "appdata-file`` properties."
#~ msgstr ""
#~ "플랫팩이 내보낸(export) 파일들은 응용프로그램 ID를 사용하여"
#~ " 이름 앞을 수식해야 한다. 플랫팩 빌더는 이러한 "
#~ "약속을 따르지 않는 응용프로그램 소스 파일들을 빌드 "
#~ "과정에서 재명명할 수 있도록 한다. 응용프로그램 아이콘,"
#~ " 데스크탑 파일, `AppData`파일들을 재명명하기 위해서는, "
#~ "``rename-icon``, ``rename-desktop-file``, "
#~ "``rename-appdata-file`` 속성을 사용한다."

